// <copyright file="GraphQLQueryTestGenerator.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using ProfileLocation.Data.EF.Entities;
using ProfileLocation.Domain.ORM.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;
using System.Text;

namespace ProfileLocation.WebAPI.Tests.Utils
{
    public class EntityInvPropCount{
        public Type Entity { get; set; }
        public bool IsKeyless { get; set; }
        public int Count { get; set; }
    }

    public class GraphQLQueryTestGenerator
    {

        /// <summary>
        /// Get UpsertQuery
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public List<GraphQLTestQueryResult> GetUpsertQuery<T>()
        {
            var model = GenerateFakeModel<T>();
            List<GraphQLTestQueryResult> ret = new List<GraphQLTestQueryResult>();
            string modelName = GetClassName(model, true);
            string explicitName = GetClassName(model, false);
            string propPkName = ToCamelCase(GetKeyName(model));
            // Build Upsert Query Holder
            string UpsertQuery = "mutation { addOrUpdate" + explicitName + "(" + modelName + ": { DATAINPUT }) { DATAOUTPUT }}";
            string UpsertExpectedResult = @"{""addOrUpdate" + explicitName + @""":{ DATAINPUT }}";
            
            // Build data input
            string dataInput = "";
            string dataOutput = "";
            

            foreach (var prop in model.GetType().GetProperties().Where(x => x.GetMethod.IsVirtual == false))
            {
                
                var propName = ToCamelCase(prop.Name);
                

                if (propPkName != propName && !IsAutoGenerated(model,prop.Name))
                {
                    dataInput += propName + ":" + GetPropertyAsString(prop, prop.GetValue(model, null)) + Environment.NewLine;
                    dataOutput += propName + Environment.NewLine;
                }
            }


            ret.Add(new GraphQLTestQueryResult()
            {
                Query = UpsertQuery.Replace("DATAINPUT", dataInput).Replace("DATAOUTPUT", dataOutput),
                ExpectedResult = UpsertExpectedResult.Replace("DATAINPUT", dataInput.Replace(Environment.NewLine, ",")),
                Type = GraphQLQueryType.UpSert
            });
            

            // Build Get Query Holder
            string GetQuery = @"{ get" + explicitName + "(" + propPkName + ": 1) {" + propPkName + "}}";
            ret.Add(new GraphQLTestQueryResult()
            {
                Query = @"{ get" + explicitName + "(" + propPkName + ": 1) {" + propPkName + "}}",
                ExpectedResult = @"{""get" + explicitName + @""":{""" + propPkName + @""":1}}",
                Type = GraphQLQueryType.Get
            });

            return ret;
        }

        #region private utilities
        

        /// <summary>
        /// Generate Fake Model Automatically
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>Model Populated</returns>
        private T GenerateFakeModel<T>()
        {
            // Generate fake Data
           return AutoBogus.AutoFaker.Generate<T>(s => s.WithRecursiveDepth(1).WithRepeatCount(0));
        }

        /// <summary>
        /// Get first pirmary key name by reflection
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="model"></param>
        /// <returns>string key name</returns>

        private string GetKeyName<T>(T model)
        {
            var ctx = (DbContext)new ProfileLocationContextEF();
            return ctx.Model.GetEntityTypes().Where(x => x.ClrType.Name == model.GetType().Name).Select(x => x.GetKeys().FirstOrDefault()?.Properties?.SingleOrDefault()?.Name).FirstOrDefault();
        }
        /// <summary>
        /// Is AutoGeneration System Version or DB Generated Field
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="model"></param>
        /// <param name="propName"></param>
        /// <returns>Bool</returns>
        private bool IsAutoGenerated<T>(T model, string propName)
        {

            // TODO: Harcoded until we find a solution to identify the generated value
            if (propName?.ToLower() == "crmguid" || propName?.ToLower() == "versionstartdate" || propName?.ToLower() == "versionenddate")
            {
                return true;
            }
            else
            {
                return false;
            }

            //var ctx = (DbContext)new ProfileLocationContextEF();
            //var tableMeta = ctx.Model.FindEntityType(model.GetType().FullName);
            //var colMeta = tableMeta.GetProperties().FirstOrDefault(f => f.Name == propName)?.SqlServer();
            //return (colMeta?.ValueGenerationStrategy.HasValue ?? false) || !string.IsNullOrWhiteSpace(colMeta?.DefaultValueSql);
        }
        
        /// <summary>
        /// Get Model Properties as String 
        /// </summary>
        /// <param name="prop">Prop Infoo</param>
        /// <param name="value">Objet Type</param>
        /// <returns>String</returns>
        private string GetPropertyAsString(PropertyInfo prop, object value)
        {
            string ret = value?.ToString();
            string doubleQuotes = @"""";

            if (prop.PropertyType == typeof(string) || prop.PropertyType == typeof(Guid) || prop.PropertyType == typeof(Guid?))
            {
                ret = doubleQuotes + ret + doubleQuotes;
            }

            if (prop.PropertyType == typeof(bool) || prop.PropertyType == typeof(bool?))
            {
                ret = ToCamelCase(ret);
            }

            
            
            if ((prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?)))
            {
                var isPK = (prop.GetCustomAttributes().Where(w => ((Type)w.TypeId) == typeof(ForeignKeyAttribute)).Any(a => ((ForeignKeyAttribute)a).Name == prop.Name));
                // As FK we are trying to bring the first one 
                ret = "1";
            }
            //var isFKId = entity.GetProperties().SelectMany(s => s.GetCustomAttributes()).Where(w => ((Type)w.TypeId) == typeof(ForeignKeyAttribute)).Any(a => ((ForeignKeyAttribute)a).Name == prop.Name);


            if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
            {
                if (!string.IsNullOrEmpty(ret))
                {
                    ret = doubleQuotes + ((DateTime)(value)).ToString("yyyy-MM-dd\\THH:mm:ss\\Z") + doubleQuotes;
                }
            }
            return ret;
        }

        /// <summary>
        /// Convert String to camelCase
        /// </summary>
        /// <param name="str">string to convert</param>
        /// <returns>camelCase string</returns>
        private string ToCamelCase(string str)
        {
            if (!string.IsNullOrEmpty(str) && str.Length > 1)
            {
                return Char.ToLowerInvariant(str[0]) + str.Substring(1);
            }
            return str;
        }

        /// <summary>
        /// Get class name
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="model"></param>
        /// <param name="camelCase">Is camel case</param>
        /// <returns></returns>
        private string GetClassName<T>(T model, bool camelCase = false)
        {
            return  camelCase ? ToCamelCase(model.GetType()?.Name) : model.GetType()?.Name;
        }
        #endregion
    }
}

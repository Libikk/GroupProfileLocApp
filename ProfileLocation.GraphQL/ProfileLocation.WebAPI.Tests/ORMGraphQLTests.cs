
// <copyright file="ORMGraphQLTests.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using Alba;
using ProfileLocation.Data.EF.Entities;
using ProfileLocation.Domain.ORM.Models;
using ProfileLocation.WebAPI.Schema.Query;
using ProfileLocation.WebAPI.Tests.Utils;
using ProfileLocation.WebAPI.Schema.Mutation;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore.Metadata;
using Xunit;

namespace ProfileLocation.WebAPI.Tests
{

    /// <summary>
    /// Application Endpoint Test
    /// </summary>
    public class ORMGraphQLTests : IDisposable
    {
        private readonly ISystemUnderTest sut;
        private readonly IWebHostBuilder builder;
        private readonly GraphQLQueryTestGenerator queryGenerator;
        public ORMGraphQLTests()
        {
            builder = WebHost.CreateDefaultBuilder().UseStartup<Startup>().UseEnvironment("Testing");
            sut = new SystemUnderTest(builder);
            var mutations = (ProfileLocationMutations) sut.Services.GetService(typeof(ProfileLocationMutations));
            mutations.EnableAllMutations();
            queryGenerator = new GraphQLQueryTestGenerator();
        }
        /// <summary>
        /// Add Application Type Data from GraphQL end point
        /// </summary>
        [Fact(DisplayName = "GraphQL Queries Test"
            //, Timeout =2000
            )]
        public async Task GraphQL_Queries_Scenatios()
        {
            // Loop Entities
            var entities = ((new ProfileLocationContextEF()).Model.GetEntityTypes());

            var entitiesCount = new List<EntityInvPropCount>();
            foreach (var entity in entities)
            {
                entitiesCount.Add(new EntityInvPropCount() { Entity = entity.ClrType, Count = entity.ClrType.GetProperties().Where(x => x.GetCustomAttribute<InversePropertyAttribute>() != null).Count(), IsKeyless = ((IMutableEntityType) entity).IsKeyless });
            }

            foreach (var entity in entitiesCount.Where(w => !w.IsKeyless).OrderByDescending(s => s.Count))
            {
                var method = typeof(GraphQLQueryTestGenerator).GetMethod("GetUpsertQuery").MakeGenericMethod(entity.Entity);
                var queryBuilder = method.Invoke(queryGenerator, null) as List<GraphQLTestQueryResult>;
                var upSertQuery = queryBuilder.Where(s => s.Type == GraphQLQueryType.UpSert).FirstOrDefault();

                if (upSertQuery != null)
                {
                    // Add Valid
                    await sut.Scenario(scenario =>
                    {
                        var insert = new GraphQLQuery() { Query = upSertQuery.Query };
                        scenario.Post.Json(insert).ToUrl("/graphql");
                        scenario.StatusCodeShouldBe(HttpStatusCode.OK);
                        scenario.GraphQL().ShouldBeSuccess(upSertQuery.ExpectedResult);

                    });
                }

                var getQuery = queryBuilder.Where(s => s.Type == GraphQLQueryType.Get).FirstOrDefault();

                if (getQuery != null)
                {
                    //  Get Valid
                    await sut.Scenario(scenario =>
                    {
                        var insert = new GraphQLQuery() { Query = getQuery.Query };
                        scenario.Post.Json(insert).ToUrl("/graphql");
                        scenario.StatusCodeShouldBe(HttpStatusCode.OK);
                        scenario.GraphQL().ShouldBeSuccess(getQuery.ExpectedResult);

                    });
                }
            }
            
        }

        

        public void Dispose()
        {
            sut.Dispose();
        }
    }
}
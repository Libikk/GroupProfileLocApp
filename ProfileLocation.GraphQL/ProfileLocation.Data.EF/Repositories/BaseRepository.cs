// <copyright file="BaseRepository.cs" company="">
// Copyright (c) . All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ProfileLocation.Data.EF.Contexts;
using ProfileLocation.Domain.ORM.Enums;
using ProfileLocation.Domain.ORM.Implementations;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.Domain.ORM.Models.Input;
using ProfileLocation.Domain.ORM.Utils;

namespace ProfileLocation.Data.EF.Repositories
{
    public abstract class BaseRepository<TEntity> : IRepository<TEntity> where TEntity : class
    {
        internal ProfileLocationContext ProfileLocationContext;
        internal ILogManager Logger;

        public Expression<Func<TEntity, object>> EntityIDSelector { get; private set; }
        private readonly string _entityName;
        private readonly bool _isAutoGenerated;
        private static IMapper _mapper;

        protected BaseRepository(ProfileLocationContext context, Expression<Func<TEntity, object>> idSelector)
        {
            if (context == null) throw new ArgumentNullException("DbContext cannot be null");

            _entityName = typeof(TEntity).Name;

            ProfileLocationContext = context;

            var prop = PropertyInfoHelper.GetPropertyInfo<TEntity>(idSelector);
            EntityIDSelector = idSelector;

            GetEntityValue = entity => prop.GetValue(entity);

            var key = context.Model.FindEntityType(typeof(TEntity)).FindPrimaryKey();

            if (key.Properties.Count != 1) throw new NotSupportedException($"Model {_entityName} missing primary key or has composite key");
            _isAutoGenerated = key.Properties.First().ValueGenerated != ValueGenerated.Never;

            if (_mapper == null)
            {
                _mapper = new MapperConfiguration(cfg =>
                    {
                        //TODO Investigate Nested Classes with automapper
                        cfg.ShouldMapProperty = p => !((p.GetGetMethod().IsVirtual) || (p.PropertyType.IsGenericType && typeof(IEnumerable).IsAssignableFrom(p.PropertyType.GetGenericTypeDefinition())));

                        var mapper = cfg.CreateMap<TEntity, TEntity>();
                        mapper.ForAllMembers(opts => opts.Condition((src, dest, srcmember, o, rc) =>
                        {
                            if (srcmember == null) return false;

                            var defaultVal = srcmember.GetType().IsValueType ? Activator.CreateInstance(srcmember.GetType()) : null;
                            if (srcmember.Equals(defaultVal)) return false;

                            return true;
                        }));
                    })
                    .CreateMapper();
            }

            Debug.WriteLine($"DBContext: {context.GetHashCode()} - {_entityName}Repository");
        }

        protected BaseRepository(ProfileLocationContext context, Expression<Func<TEntity, object>> idSelector, ILogManager logManager) : this(context, idSelector)
        {
            Logger = logManager;
        }

        protected TEntity VerifyItemIsAddedOrAttachedToDbSet(TEntity entity)
        {
            try
            {
                if (entity == null) return null;
                var entry = ProfileLocationContext.Entry(entity);

                if (entry.IsKeySet)
                {
                    //TODO Tidy! + Tidy automapper!
                    if (!_isAutoGenerated)
                    {
                        var keyValue = GetEntityValue(entity);
                        var existingEntity = DoGetById(keyValue);
                        if (existingEntity != null)
                        {
                            CopyChangesToEntity(entity, existingEntity);
                            entity = existingEntity;
                        }
                    }
                    else
                    {
                        entry = ProfileLocationContext.Entry(entity);

                        if (entry.State == EntityState.Detached)
                        {
                            EntityDbSet.Attach(entity);
                        }

                        if (entry.State != EntityState.Added)
                        {
                            entry.State = EntityState.Modified;
                        }
                    }
                }
                else
                {
                    Debug.WriteLine($"Adding {entity.GetType().Name}");
                    EntityDbSet.Add(entity);
                }

                return entity;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error attaching entity [{typeof(TEntity).Name}]", ex);
                throw;
            }
        }

        protected Func<TEntity, object> GetEntityValue;

        public abstract DbSet<TEntity> EntityDbSet
        {
            get;
        }

        #region GetAll

        public IPagedList<TEntity> GetAll(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null)
        {
            return GetAll(pageSize, pageNumber, sortOrders, null);
        }
        public IPagedList<TEntity> GetAll(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                var query = GetQuery(EntityDbSet.AsQueryable(), sortOrders, includes);

                var totalCount = query.Count();
                var results = query.Skip(pageSize * (pageNumber - 1)).Take(pageSize);

                var ret = new PagedList<TEntity>(results.ToList(), totalCount, pageNumber, pageSize);

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} GetById", ex);
                throw;
            }
        }

        #endregion

        #region GetById

        protected TEntity DoGetById(object id, Expression<Func<TEntity, object>>[] includes = null)
        {
            try
            {
                var mem = PropertyInfoHelper.ExtractMemberExpression(EntityIDSelector.Body);

                Expression val;

                if (id.GetType() == typeof(TEntity))
                {
                    val = Expression.Constant(Convert.ChangeType(GetEntityValue((TEntity)id), mem.Type));
                }
                else
                {
                    val = Expression.Constant(Convert.ChangeType(id, mem.Type));
                }

                var eqEx = Expression.Equal(mem, val);
                var efExpression = Expression.Lambda<Func<TEntity, bool>>(eqEx, EntityIDSelector.Parameters);

                var query = GetQuery(EntityDbSet.AsQueryable(), null, includes);

                var ret = query.FirstOrDefault(efExpression);

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} GetById", ex);
                throw;
            }
        }
        public TEntity GetById(object id)
        {
            return DoGetById(id);
        }
        public TEntity GetById(object id, params Expression<Func<TEntity, object>>[] includes)
        {
            return DoGetById(id, includes);
        }

        #endregion

        #region GetByIds

        public IList<TEntity> GetByIds(IEnumerable<object> ids, IList<SortOrderModel> sortOrders = null)
        {
            return GetByIds(ids, sortOrders, null);
        }

        public IList<TEntity> GetByIds(IEnumerable<object> ids, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                var mem = PropertyInfoHelper.ExtractMemberExpression(EntityIDSelector.Body);
                var castMethod = typeof(Enumerable).GetMethod("Cast").MakeGenericMethod(mem.Type);
                var containsMethod = typeof(Enumerable).GetMethods().First(f => f.Name == "Contains" && f.GetParameters().Length == 2).MakeGenericMethod(mem.Type);

                var idsAsKeyType = castMethod.Invoke(null, new [] { ids });
                var idsAsConstantExpression = Expression.Constant(idsAsKeyType);

                var eqEx = Expression.Call(containsMethod, idsAsConstantExpression, mem);
                var efExpression = Expression.Lambda<Func<TEntity, bool>>(eqEx, EntityIDSelector.Parameters);

                var query = GetQuery(EntityDbSet.AsQueryable(), sortOrders, includes);

                var ret = query.Where(efExpression).ToList();

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} GetById", ex);
                throw;
            }
        }

        #endregion

        #region Search

        protected IPagedList<TEntity> DoSearch(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, Expression<Func<TEntity, object>>[] includes = null)
        {
            try
            {
                var query = GetQuery(EntityDbSet.AsQueryable(), sortOrders, includes);

                query = query.Where(predicate);

                var totalCount = query.Count();
                var results = query.Skip(pageSize * (pageNumber - 1)).Take(pageSize);

                var ret = new PagedList<TEntity>(results.ToList(), totalCount, pageNumber, pageSize);

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} Search", ex);
                throw;
            }
        }
        public IPagedList<TEntity> Search(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null)
        {
            return DoSearch(predicate, pageSize, pageNumber, sortOrders, null);
        }
        public IPagedList<TEntity> Search(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes)
        {
            return DoSearch(predicate, pageSize, pageNumber, sortOrders, includes);
        }

        #endregion


        #region GetAllAsync

        protected async Task<IPagedList<TEntity>> DoGetAllAsync(int pageSize = 10, int pageNumber = 1, Expression<Func<TEntity, object>>[] includes = null)
        {
            try
            {
                var query = EntityDbSet.AsQueryable();

                if (includes != null)
                {
                    foreach (var include in includes)
                    {
                        query = query.Include(include);
                    }
                }

                var totalCount = await query.CountAsync();
                var results = query.Skip(pageSize * (pageNumber - 1)).Take(pageSize);

                var ret = new PagedList<TEntity>(await results.ToListAsync(), totalCount, pageNumber, pageSize);

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} GetAllAsync", ex);
                throw;
            }
        }

        public async Task<IPagedList<TEntity>> GetAllAsync(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null)
        {
            return await DoGetAllAsync(pageSize, pageNumber);
        }

        public async Task<IPagedList<TEntity>> GetAllAsync(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes)
        {
            return await DoGetAllAsync(pageSize, pageNumber, includes);
        }

        #endregion

        #region GetByIDAsync

        protected async Task<TEntity> DoGetByIdAsync(object id, Expression<Func<TEntity, object>>[] includes = null)
        {
            try
            {
                var val = Expression.Constant(id);
                var mem = PropertyInfoHelper.ExtractMemberExpression(EntityIDSelector.Body);
                var eqEx = Expression.Equal(mem, val);
                var efExpression = Expression.Lambda<Func<TEntity, bool>>(eqEx, EntityIDSelector.Parameters);

                var query = GetQuery(EntityDbSet.AsQueryable(), null, includes);

                return await query.FirstOrDefaultAsync(efExpression);
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} GetByIDAsync", ex);
                throw;
            }
        }
        public async Task<TEntity> GetByIdAsync(object id)
        {
            return await DoGetByIdAsync(id);
        }
        public async Task<TEntity> GetByIdAsync(object id, params Expression<Func<TEntity, object>>[] includes)
        {
            return await DoGetByIdAsync(id, includes);
        }

        #endregion

        #region GetByIdsAsync

        public Task<IList<TEntity>> GetByIdsAsync(IEnumerable<object> ids, IList<SortOrderModel> sortOrders = null)
        {
            return GetByIdsAsync(ids, sortOrders, null);
        }

        public async Task<IList<TEntity>> GetByIdsAsync(IEnumerable<object> ids, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                var mem = PropertyInfoHelper.ExtractMemberExpression(EntityIDSelector.Body);
                var castMethod = typeof(Enumerable).GetMethod("Cast").MakeGenericMethod(mem.Type);
                var containsMethod = typeof(Enumerable).GetMethods().First(f => f.Name == "Contains" && f.GetParameters().Length == 2).MakeGenericMethod(mem.Type);

                var idsAsKeyType = castMethod.Invoke(null, new [] { ids });
                var idsAsConstantExpression = Expression.Constant(idsAsKeyType);

                var eqEx = Expression.Call(containsMethod, idsAsConstantExpression, mem);
                var efExpression = Expression.Lambda<Func<TEntity, bool>>(eqEx, EntityIDSelector.Parameters);

                var query = GetQuery(EntityDbSet.AsQueryable(), sortOrders, includes);

                var ret = await query.Where(efExpression).ToListAsync();

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} GetById", ex);
                throw;
            }
        }

        #endregion

        #region SearchAsync

        protected async Task<IPagedList<TEntity>> DoSearchAsync(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, Expression<Func<TEntity, object>>[] includes = null)
        {
            try
            {
                var query = GetQuery(EntityDbSet.Where(predicate), sortOrders, includes);
                var totalCount = await query.CountAsync();
                var results = query.Skip(pageSize * (pageNumber - 1)).Take(pageSize);

                var ret = new PagedList<TEntity>(await results.ToListAsync(), totalCount, pageNumber, pageSize);

                return ret;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} SearchAsync", ex);
                throw;
            }
        }
        public async Task<IPagedList<TEntity>> SearchAsync(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes)
        {
            return await DoSearchAsync(predicate, pageSize, pageNumber, sortOrders, includes);
        }

        public async Task<IPagedList<TEntity>> SearchAsync(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null)
        {
            return await DoSearchAsync(predicate, pageSize, pageNumber, sortOrders);
        }

        #endregion


        public TEntity Save(TEntity saveThis)
        {
            try
            {
                if (saveThis == null) throw new ArgumentNullException("saveThis");

                saveThis = VerifyItemIsAddedOrAttachedToDbSet(saveThis);

                ProfileLocationContext.SaveChanges();

                return saveThis;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} Save", ex);
                throw;
            }
        }
        public bool Delete(TEntity deleteThis)
        {
            try
            {
                if (deleteThis == null) throw new ArgumentNullException("deleteThis");

                var entry = ProfileLocationContext.Entry(deleteThis);

                if (entry.State == EntityState.Detached)
                {
                    EntityDbSet.Attach(deleteThis);
                }

                EntityDbSet.Remove(deleteThis);

                return true;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} delete", ex);
                throw;
            }
        }

        public async Task<TEntity> SaveAsync(TEntity saveThis)
        {
            try
            {
                if (saveThis == null) throw new ArgumentNullException("saveThis");

                VerifyItemIsAddedOrAttachedToDbSet(saveThis);

                await ProfileLocationContext.SaveChangesAsync();

                return saveThis;
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} Save", ex);
                throw;
            }
        }
        public Task<bool> DeleteAsync(TEntity deleteThis)
        {
            try
            {
                if (deleteThis == null) throw new ArgumentNullException("deleteThis");

                var entry = ProfileLocationContext.Entry(deleteThis);

                if (entry.State == EntityState.Detached)
                {
                    EntityDbSet.Attach(deleteThis);
                }

                EntityDbSet.Remove(deleteThis);

                return Task.FromResult(true);
            }
            catch (Exception ex)
            {
                Logger?.Fatal($"Error in {_entityName} delete", ex);
                throw;
            }
        }

        public IQueryable<TEntity> Entities => EntityDbSet.AsQueryable();

        public IQueryable<TEntity> HeavyEntities(params Expression<Func<TEntity, object>>[] includes)
        {
            var query = Entities.AsQueryable();
            if (includes != null)
            {
                foreach (var include in includes)
                {
                    query = query.Include(include);
                }
            }

            return query;
        }

        private static void CopyChangesToEntity(TEntity changes, TEntity entity)
        {
            _mapper.Map(changes, entity, changes.GetType(), typeof(TEntity));
        }

        private static IQueryable<TEntity> GetQuery(IQueryable<TEntity> query, IList<SortOrderModel> sortOrders, Expression<Func<TEntity, object>>[] includes)
        {
            if (includes != null)
            {
                foreach (var include in includes)
                {
                    query = query.Include(include);
                }
            }

            if (sortOrders != null && sortOrders.Any())
            {
                var paramExpression = Expression.Parameter(typeof(TEntity), "o");
                IOrderedQueryable<TEntity> sortedQuery = null;

                for (int i = 0; i < sortOrders.Count; i++)
                {
                    var order = sortOrders[i];
                    var propertyExpression = Expression.PropertyOrField(paramExpression, order.Field);
                    var convertExpression = Expression.Convert(propertyExpression, typeof(object));

                    var lambdaExpression = Expression.Lambda<Func<TEntity, object>>(convertExpression, paramExpression);

                    if (order.Direction == SortDirectionEnum.ASC)
                    {
                        sortedQuery = i == 0 ? query.OrderBy(lambdaExpression) : sortedQuery.ThenBy(lambdaExpression);
                    }
                    else
                    {
                        sortedQuery = i == 0 ? query.OrderByDescending(lambdaExpression) : sortedQuery.ThenByDescending(lambdaExpression);
                    }
                }

                query = sortedQuery.AsQueryable();
            }

            return query;
        }
    }
}

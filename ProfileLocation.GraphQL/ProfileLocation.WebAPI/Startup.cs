// <copyright file="Startup.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using GraphQL.DataLoader;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using ProfileLocation.Domain.ORM.Implementations;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.WebAPI.ExtensionMethods;

namespace ProfileLocation.WebAPI
{
    public class Startup
    {
        public Startup(IConfiguration configuration, IWebHostEnvironment environment)
        {
            Configuration = configuration;
            Environment = environment;
        }

        public IConfiguration Configuration { get; }
        public IWebHostEnvironment Environment { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddTransient<ILogManager, DefaultLogger>();

            services.AddHttpContextAccessor();
            services.AddScoped(s => s.GetService<IHttpContextAccessor>().HttpContext.User);

            if (Environment.EnvironmentName == "Testing")
            {
                services.AddMvc(s =>
                        {
                            s.EnableEndpointRouting = false;
                            s.Filters.Add(new AllowAnonymousFilter());
                        })
                .AddNewtonsoftJson();
            }
            else 
            {
                services.AddMvc(
                    // Enable This Property to work with unit test.
                    s=>s.EnableEndpointRouting = false
                )
                .AddNewtonsoftJson();
            }
            

            services.AddCors();
           
            services.AddSingleton<IDataLoaderContextAccessor, DataLoaderContextAccessor>();
            services.AddSingleton<DataLoaderDocumentListener>();

            services.AddGraphQLConfig();
            services.AddProfileLocationConfig(Environment, Configuration);

//            services.AddAuthentication("Bearer")
//                .AddJwtBearer(options =>
//                {
//                    options.Authority = Configuration.GetSection("Security:IDServer").Get<string>();
//#if DEBUG
//                    options.RequireHttpsMetadata = false;
//#endif
//                    //TODO Clarify this
//                    options.Audience = Configuration.GetSection("Security:ApplicationName").Get<string>();
//                    options.TokenValidationParameters = new TokenValidationParameters()
//                    {
//                        NameClaimType = "name"
//                    };
//                });


            // Reset for Unit Test
            AutoMapper.Mapper.Reset();
            AutoMapper.Mapper.Initialize(cfg => { });
        }
        
        public void Configure(IApplicationBuilder app)
        {
            if (Environment.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
                app.UseHttpsRedirection();
            }

            app.UseCors(b => b.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());

            app.UseWebSockets();
            app.UseAuthentication();

            // Register the Schemas
            app.UseProfileLocationConfig();

            app.UseMvc(routes => { routes.MapRoute("default", "{controller=GraphQL}/{action=Index}"); });   
        }
    }
}

// <copyright file="SocialType.cs" company="">
// Copyright (c) . All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using GraphQL;
using GraphQL.DataLoader;
using GraphQL.Resolvers;
using GraphQL.Types;
using Microsoft.EntityFrameworkCore;
using ProfileLocation.Data.EF.Entities;
using ProfileLocation.Data.EF.Contexts;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.Domain.ORM.Models;

namespace ProfileLocation.WebAPI.Models.GraphQL
{
	public class SocialType : ObjectGraphType<Social>
	{
		public SocialType(IDataLoaderContextAccessor accessor)
		{
            Name = "SocialQLType";
 
    		var fldId = Field(typeof(int).GetGraphTypeFromType(false), "Id");
			fldId.Resolver = new FuncFieldResolver<Social,object>(ctx => ctx.Source.Id);
 
    		var fldSocialTypeId = Field(typeof(int).GetGraphTypeFromType(false), "SocialTypeId");
			fldSocialTypeId.Resolver = new FuncFieldResolver<Social,object>(ctx => ctx.Source.SocialTypeId);
 
    		var fldValue = Field(typeof(string).GetGraphTypeFromType(true), "Value");
			fldValue.Resolver = new FuncFieldResolver<Social,object>(ctx => ctx.Source.Value);
 
    		var fldPhotoUrl = Field(typeof(string).GetGraphTypeFromType(true), "PhotoUrl");
			fldPhotoUrl.Resolver = new FuncFieldResolver<Social,object>(ctx => ctx.Source.PhotoUrl);
 
    		var fldIsDeleted = Field(typeof(bool).GetGraphTypeFromType(false), "IsDeleted");
			fldIsDeleted.Resolver = new FuncFieldResolver<Social,object>(ctx => ctx.Source.IsDeleted);
 
    		var fldProfileId = Field(typeof(int).GetGraphTypeFromType(false), "ProfileId");
			fldProfileId.Resolver = new FuncFieldResolver<Social,object>(ctx => ctx.Source.ProfileId);

            var fldProfile = Field(typeof(ProfileType), "Profile");
			fldProfile.Resolver = new FuncFieldResolver<Social,object>(ctx => 
            { 
                var poItemsLoader = accessor.Context.GetOrAddBatchLoader<int, ProfileLocation.Domain.ORM.Models.Profile>("GetProfileByProfileId", async ids => 
                { 
                    var repo = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<IRepository<ProfileLocation.Domain.ORM.Models.Profile>>(); 
                    var search = await repo.SearchAsync(s => ids.Contains(s.Id), int.MaxValue); 
                    return search.Items.ToDictionary(k => k.Id, v => v);
                }); 
 
                return poItemsLoader.LoadAsync(ctx.Source.ProfileId); 
            });
    
            var fldSocialType = Field(typeof(SocialTypeType), "SocialType");
			fldSocialType.Resolver = new FuncFieldResolver<Social,object>(ctx => 
            { 
                var poItemsLoader = accessor.Context.GetOrAddBatchLoader<int, ProfileLocation.Domain.ORM.Models.SocialType>("GetSocialTypeBySocialTypeId", async ids => 
                { 
                    var repo = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<IRepository<ProfileLocation.Domain.ORM.Models.SocialType>>(); 
                    var search = await repo.SearchAsync(s => ids.Contains(s.Id), int.MaxValue); 
                    return search.Items.ToDictionary(k => k.Id, v => v);
                }); 
 
                return poItemsLoader.LoadAsync(ctx.Source.SocialTypeId); 
            });
    
        }

    }

}
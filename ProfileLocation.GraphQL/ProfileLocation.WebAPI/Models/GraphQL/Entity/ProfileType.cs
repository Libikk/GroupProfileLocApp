// <copyright file="ProfileType.cs" company="">
// Copyright (c) . All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using GraphQL;
using GraphQL.DataLoader;
using GraphQL.Resolvers;
using GraphQL.Types;
using Microsoft.EntityFrameworkCore;
using ProfileLocation.Data.EF.Entities;
using ProfileLocation.Data.EF.Contexts;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.Domain.ORM.Models;

namespace ProfileLocation.WebAPI.Models.GraphQL
{
	public class ProfileType : ObjectGraphType<Profile>
	{
		public ProfileType(IDataLoaderContextAccessor accessor)
		{
            Name = "ProfileQLType";
 
    		var fldId = Field(typeof(int).GetGraphTypeFromType(false), "Id");
			fldId.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Id);
 
    		var fldUsername = Field(typeof(string).GetGraphTypeFromType(true), "Username");
			fldUsername.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Username);
 
    		var fldName = Field(typeof(string).GetGraphTypeFromType(true), "Name");
			fldName.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Name);
 
    		var fldBio = Field(typeof(string).GetGraphTypeFromType(true), "Bio");
			fldBio.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Bio);
 
    		var fldNicknames = Field(typeof(string).GetGraphTypeFromType(true), "Nicknames");
			fldNicknames.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Nicknames);
 
    		var fldEmail = Field(typeof(string).GetGraphTypeFromType(true), "Email");
			fldEmail.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Email);
 
    		var fldCountry = Field(typeof(string).GetGraphTypeFromType(true), "Country");
			fldCountry.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Country);
 
    		var fldMobile = Field(typeof(string).GetGraphTypeFromType(true), "Mobile");
			fldMobile.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Mobile);
 
    		var fldLocationId = Field(typeof(int).GetGraphTypeFromType(true), "LocationId");
			fldLocationId.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.LocationId);
 
    		var fldPhotoUrl = Field(typeof(string).GetGraphTypeFromType(true), "PhotoUrl");
			fldPhotoUrl.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.PhotoUrl);
 
    		var fldIsApproved = Field(typeof(bool).GetGraphTypeFromType(false), "IsApproved");
			fldIsApproved.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.IsApproved);
 
    		var fldIsAdmin = Field(typeof(bool).GetGraphTypeFromType(false), "IsAdmin");
			fldIsAdmin.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.IsAdmin);
 
    		var fldIsActive = Field(typeof(bool).GetGraphTypeFromType(false), "IsActive");
			fldIsActive.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.IsActive);
 
    		var fldGuid = Field(typeof(Guid).GetGraphTypeFromType(false), "Guid");
			fldGuid.Resolver = new FuncFieldResolver<Profile,object>(ctx => ctx.Source.Guid);

            var fldLocation = Field(typeof(LocationType), "Location");
			fldLocation.Resolver = new FuncFieldResolver<Profile,object>(ctx => 
            { 
                var poItemsLoader = accessor.Context.GetOrAddBatchLoader<int, ProfileLocation.Domain.ORM.Models.Location>("GetLocationByLocationId", async ids => 
                { 
                    var repo = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<IRepository<ProfileLocation.Domain.ORM.Models.Location>>(); 
                    var search = await repo.SearchAsync(s => ids.Contains(s.Id), int.MaxValue); 
                    return search.Items.ToDictionary(k => k.Id, v => v);
                }); 
 
                return ctx.Source.LocationId == null ? null : poItemsLoader.LoadAsync(ctx.Source.LocationId.Value); 
            });
    
            var fldProfileGroups = Field(typeof(ListGraphType<ProfileGroupType>), "ProfileGroups");
			fldProfileGroups.Resolver = new FuncFieldResolver<Profile,object>(ctx => 
            { 
                var poItemsLoader = accessor.Context.GetOrAddCollectionBatchLoader<int, ProfileLocation.Domain.ORM.Models.ProfileGroup>("GetProfileGroupsById", async ids => 
                { 
                    var repo = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<IRepository<ProfileLocation.Domain.ORM.Models.ProfileGroup>>(); 
                    var search = await repo.SearchAsync(s => ids.Contains(s.ProfileId), int.MaxValue); 
                    return search.Items.ToLookup(k => k.ProfileId);
                }); 
 
                return poItemsLoader.LoadAsync(ctx.Source.Id); 
            });

            var fldProfileGroupsCount = Field(typeof(IntGraphType), "ProfileGroupsCount");
            fldProfileGroupsCount.Resolver = new FuncFieldResolver<Profile, object>((ctx) => 
            { 
                var db = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<ProfileLocationContext>(); 
                return db.Set<ProfileLocation.Domain.ORM.Models.ProfileGroup>().CountAsync(c => c.ProfileId == ctx.Source.Id);
            });
        
            var fldSocials = Field(typeof(ListGraphType<SocialType>), "Socials");
			fldSocials.Resolver = new FuncFieldResolver<Profile,object>(ctx => 
            { 
                var poItemsLoader = accessor.Context.GetOrAddCollectionBatchLoader<int, ProfileLocation.Domain.ORM.Models.Social>("GetSocialsById", async ids => 
                { 
                    var repo = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<IRepository<ProfileLocation.Domain.ORM.Models.Social>>(); 
                    var search = await repo.SearchAsync(s => ids.Contains(s.ProfileId), int.MaxValue); 
                    return search.Items.ToLookup(k => k.ProfileId);
                }); 
 
                return poItemsLoader.LoadAsync(ctx.Source.Id); 
            });

            var fldSocialsCount = Field(typeof(IntGraphType), "SocialsCount");
            fldSocialsCount.Resolver = new FuncFieldResolver<Profile, object>((ctx) => 
            { 
                var db = ((QLUserContext) ctx.UserContext).ServiceProvider.GetService<ProfileLocationContext>(); 
                return db.Set<ProfileLocation.Domain.ORM.Models.Social>().CountAsync(c => c.ProfileId == ctx.Source.Id);
            });
        
        }

    }

}
// <copyright file="EntityObservable.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ProfileLocation.WebAPI.Models
{
    public class EntityObservable<TEntity> : IObservable<TEntity>
    {
        private readonly Action _allSubsRemovedAction;
        private List<IObserver<TEntity>> _observers = new List<IObserver<TEntity>>();

        public EntityObservable()
        {
            
        }

        public EntityObservable(Action allSubsRemovedAction)
        {
            _allSubsRemovedAction = allSubsRemovedAction;
        }

        public IDisposable Subscribe(IObserver<TEntity> observer)
        {
            if (!_observers.Contains(observer))
                _observers.Add(observer);

            return new Unsub(_observers, observer, _allSubsRemovedAction);
        }

        public void SendEntity(TEntity entity)
        {
            foreach (var observer in _observers)
            {
                observer.OnNext(entity);
            }
        }

        private class Unsub : IDisposable
        {
            private readonly List<IObserver<TEntity>> _observers;
            private readonly IObserver<TEntity> _observer;
            private readonly Action _allSubsRemovedAction;

            public Unsub(List<IObserver<TEntity>> observers, IObserver<TEntity> observer, Action allSubsRemovedAction)
            {
                _observers = observers;
                _observer = observer;
                _allSubsRemovedAction = allSubsRemovedAction;
            }
            public void Dispose()
            {
                if (_observer != null && _observers.Contains(_observer))
                {
                    _observers.Remove(_observer);
                    if (_observers.Count == 0)
                    {
                        _allSubsRemovedAction?.Invoke();
                    }
                }
            }
        }

    }
}

// <copyright file="ProfileLocationConfigExtension.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />

namespace ProfileLocation.WebAPI.ExtensionMethods
{
    using EntityFrameworkCore.Triggers;
    using GraphQL.Server;
    using GraphQL.Types;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.DependencyInjection;
    using ProfileLocation.Data.EF.Contexts;
    using ProfileLocation.Data.EF.Entities;
    using ProfileLocation.Domain.ORM.Enums;
    using ProfileLocation.Domain.ORM.Interfaces;
    using ProfileLocation.Domain.ORM.Models;
    using ProfileLocation.Domain.ORM.Models.Communications;
    using ProfileLocation.Service.ORM.Communications;
    using ProfileLocation.WebAPI.Models;
    using ProfileLocation.WebAPI.Models.GraphQL.Shared;
    using ProfileLocation.WebAPI.Schema;
    using ProfileLocation.WebAPI.Schema.Mutation;
    using ProfileLocation.WebAPI.Schema.Query;
    using ProfileLocation.WebAPI.Schema.Subscription;
    using ProfileLocation.WebAPI.Utils;
    using System;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Xml.Linq;
    using System.Security.Claims;
    using System.Threading.Tasks;
    using GraphQL.Utilities;
    using ProfileLocation.Domain.ORM.Attributes;
    using NLog;
    using Microsoft.Extensions.Configuration;

    public static class ProfileLocationConfigExtension
    {
        private static ILogger _logger = NLog.LogManager.GetCurrentClassLogger();

        public static void AddProfileLocationConfig(this IServiceCollection services, IWebHostEnvironment environment, IConfiguration configuration)
        {
            services.AddTransient(s =>
            {
                var opt = new DbContextOptionsBuilder<ProfileLocationContextEF>();
                if (environment.EnvironmentName == "Testing")
                {
                    // Add In Memory Datatabase for unit test
                    opt.UseInMemoryDatabase("TestingProfileLocation");
                }
                else
                {
                    opt.UseSqlServer(configuration.GetConnectionString("ProfileLocationDatabase"));
                    opt.UseLazyLoadingProxies();
                }

                var ctx = new ProfileLocationContext(opt.Options);

                return ctx;
            });

            // Add ProfileLocationUserContext
            services.AddScoped(ctx =>
            {
                var claimsPrincipal = ctx.GetService<ClaimsPrincipal>();
                return (IUserContext) new UserContextModel()
                {
                    Username = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier).Value,
                    DisplayName = claimsPrincipal.FindFirst("name").Value,
                    ApplicationID = Convert.ToInt32(claimsPrincipal.FindFirst("appid").Value),
                    UserID = Convert.ToInt32(claimsPrincipal.FindFirst("uid").Value),
                    Roles = claimsPrincipal.FindAll(ClaimTypes.Role)?.Select(s => s.Value).ToArray(),
                    Scopes = claimsPrincipal.FindAll("scope")?.Select(s => s.Value).ToArray(),
                };
            });

            //Entity Repositories
            #region Repositories

            services.AddTransient(typeof(IRepository<Group>), typeof(ProfileLocation.Data.EF.Repositories.GroupRepository));
            services.AddTransient(typeof(IRepository<Location>), typeof(ProfileLocation.Data.EF.Repositories.LocationRepository));
            services.AddTransient(typeof(IRepository<Profile>), typeof(ProfileLocation.Data.EF.Repositories.ProfileRepository));
            services.AddTransient(typeof(IRepository<ProfileGroup>), typeof(ProfileLocation.Data.EF.Repositories.ProfileGroupRepository));
            services.AddTransient(typeof(IRepository<Social>), typeof(ProfileLocation.Data.EF.Repositories.SocialRepository));
            services.AddTransient(typeof(IRepository<SocialType>), typeof(ProfileLocation.Data.EF.Repositories.SocialTypeRepository));
            #endregion

            //Register All Entity Types

            #region Group
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.GroupType));
            services.AddSingleton(typeof(PagedListType<ProfileLocation.Domain.ORM.Models.Group,ProfileLocation.WebAPI.Models.GraphQL.GroupType>));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Search.GroupSearchType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Input.GroupInputType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.GroupEnumType));
            services.AddSingleton(typeof(SortOrderType<ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.GroupEnumType>));
            GraphTypeTypeRegistry.Register<ProfileLocation.Domain.ORM.Models.Group, ProfileLocation.WebAPI.Models.GraphQL.GroupType>();
            #endregion

            #region Location
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.LocationType));
            services.AddSingleton(typeof(PagedListType<ProfileLocation.Domain.ORM.Models.Location,ProfileLocation.WebAPI.Models.GraphQL.LocationType>));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Search.LocationSearchType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Input.LocationInputType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.LocationEnumType));
            services.AddSingleton(typeof(SortOrderType<ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.LocationEnumType>));
            GraphTypeTypeRegistry.Register<ProfileLocation.Domain.ORM.Models.Location, ProfileLocation.WebAPI.Models.GraphQL.LocationType>();
            #endregion

            #region Profile
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.ProfileType));
            services.AddSingleton(typeof(PagedListType<ProfileLocation.Domain.ORM.Models.Profile,ProfileLocation.WebAPI.Models.GraphQL.ProfileType>));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Search.ProfileSearchType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Input.ProfileInputType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.ProfileEnumType));
            services.AddSingleton(typeof(SortOrderType<ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.ProfileEnumType>));
            GraphTypeTypeRegistry.Register<ProfileLocation.Domain.ORM.Models.Profile, ProfileLocation.WebAPI.Models.GraphQL.ProfileType>();
            #endregion

            #region ProfileGroup
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.ProfileGroupType));
            services.AddSingleton(typeof(PagedListType<ProfileLocation.Domain.ORM.Models.ProfileGroup,ProfileLocation.WebAPI.Models.GraphQL.ProfileGroupType>));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Search.ProfileGroupSearchType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Input.ProfileGroupInputType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.ProfileGroupEnumType));
            services.AddSingleton(typeof(SortOrderType<ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.ProfileGroupEnumType>));
            GraphTypeTypeRegistry.Register<ProfileLocation.Domain.ORM.Models.ProfileGroup, ProfileLocation.WebAPI.Models.GraphQL.ProfileGroupType>();
            #endregion

            #region Social
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.SocialType));
            services.AddSingleton(typeof(PagedListType<ProfileLocation.Domain.ORM.Models.Social,ProfileLocation.WebAPI.Models.GraphQL.SocialType>));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Search.SocialSearchType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Input.SocialInputType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.SocialEnumType));
            services.AddSingleton(typeof(SortOrderType<ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.SocialEnumType>));
            GraphTypeTypeRegistry.Register<ProfileLocation.Domain.ORM.Models.Social, ProfileLocation.WebAPI.Models.GraphQL.SocialType>();
            #endregion

            #region SocialType
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.SocialTypeType));
            services.AddSingleton(typeof(PagedListType<ProfileLocation.Domain.ORM.Models.SocialType,ProfileLocation.WebAPI.Models.GraphQL.SocialTypeType>));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Search.SocialTypeSearchType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.Input.SocialTypeInputType));
            services.AddSingleton(typeof(ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.SocialTypeEnumType));
            services.AddSingleton(typeof(SortOrderType<ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums.SocialTypeEnumType>));
            GraphTypeTypeRegistry.Register<ProfileLocation.Domain.ORM.Models.SocialType, ProfileLocation.WebAPI.Models.GraphQL.SocialTypeType>();
            #endregion


            services.AddSingleton<ProfileLocationSubscriptions>();
            var mutations = new ProfileLocationMutations(environment);
            services.AddSingleton<ProfileLocationMutations>(mutations);

            var query = new ProfileLocationQuery();
            services.AddSingleton<ProfileLocationQuery>(query);


            var entityObjectEventService = new EntityObjectEventService();
            services.AddSingleton<IEntityObjectEventService>(ctx => entityObjectEventService);

            RegisterTriggers(entityObjectEventService);

            RegisterManagers(services, query, mutations);

            services.AddSingleton<ProfileLocationSchema>();
        }
    

        public static void UseProfileLocationConfig(this IApplicationBuilder app)
        {
            app.UseGraphQLWebSockets<ProfileLocationSchema>("/graphql");
        }

        #region private functions
        /// <summary>
        /// Register Triggers
        /// </summary>
        /// <param name="entityObjectEventService"></param>
        private static void RegisterTriggers(IEntityObjectEventService entityObjectEventService)
        {
            
            Triggers<Group>.Inserted += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Added }); 
            Triggers<Group>.Updated += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Modified }); 
            
            Triggers<Location>.Inserted += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Added }); 
            Triggers<Location>.Updated += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Modified }); 
            
            Triggers<Profile>.Inserted += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Added }); 
            Triggers<Profile>.Updated += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Modified }); 
            
            Triggers<ProfileGroup>.Inserted += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Added }); 
            Triggers<ProfileGroup>.Updated += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Modified }); 
            
            Triggers<Social>.Inserted += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Added }); 
            Triggers<Social>.Updated += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Modified }); 
            
            Triggers<SocialType>.Inserted += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Added }); 
            Triggers<SocialType>.Updated += entry => entityObjectEventService.RaiseObjectEvent(new EntityObjectEventMessageModel() { Entity = entry.Entity, EventType = EntityObjectEventTypeEnum.Modified }); 
            
        }

        /// <summary>
        /// Register Managers
        /// </summary>
        /// <param name="services"></param>
        /// <param name="query"></param>
        private static void RegisterManagers(IServiceCollection services, ObjectGraphType query, ObjectGraphType mutation)
        {
            Type[] managerTypes = null;
            try
            {
                managerTypes = Assembly.Load("ProfileLocation.Managers").GetTypes();
            }
            catch (Exception ex)
            {
                _logger.Warn(ex, $"Cannot load managers dll");
                return;
            }

            XElement[] xmlMemberComments = null;
            var managersXmlLocation = Path.ChangeExtension(Assembly.Load("ProfileLocation.Managers").Location, ".xml");

            if (File.Exists(managersXmlLocation))
            {
                xmlMemberComments = XDocument.Load(managersXmlLocation).Root.Element("members").Elements().ToArray();
            }


            //Reflect on all Managers
            foreach (var managerType in managerTypes.Where(w => w.IsClass && w.Name.EndsWith("Manager")))
            {
                if (managerType.GetCustomAttribute<QLIgnoreAttribute>() != null)
                {
                    _logger.Info($"Manager: {managerType.Name} is ignored due to QLIgnore Attribute");
                    continue;
                }

                var managerObsoleteAtt = (ObsoleteAttribute)managerType.GetCustomAttribute(typeof(ObsoleteAttribute));
                var deprecationReason = managerObsoleteAtt != null ? managerObsoleteAtt.Message ?? "Marked Obsolete" : null;

                //Add type to DI
                services.AddTransient(managerType);

                //Reflect on each method exposed and add as a field to QL Context
                foreach (var method in managerType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
                {
                    //If method returns void then ignore as not supported
                    if (method.ReturnType == typeof(void) || method.ReturnType == typeof(Task))
                    {
                        _logger.Warn($"Manager {managerType.Name} has method({method.Name}) which returns {method.ReturnType.Name} and is not currently supported");
                        continue;
                    }

                    var isAsync = method.ReturnType.IsGenericType && method.ReturnType.GetGenericTypeDefinition() == typeof(Task<>);
                    var methodReturnType = isAsync ? method.ReturnType.GetGenericArguments()[0] : method.ReturnType;

                    if (method.GetCustomAttribute<QLIgnoreAttribute>() != null)
                    {
                        _logger.Info($"Manager: {managerType.Name} has method({method.Name}) that is ignored due to QLIgnore Attribute");
                        continue;
                    }

                    string memberXmlComment = null;
                    var memberXml = xmlMemberComments?.FirstOrDefault(f => f.Attribute("name")?.Value.StartsWith($"M:{method.DeclaringType.FullName}.{method.Name}") ?? false);
                    if (memberXml != null)
                    {
                        memberXmlComment = memberXml.Element("summary")?.Value?.Trim();
                    }

                    var methodObsoleteAtt = (ObsoleteAttribute)managerType.GetCustomAttribute(typeof(ObsoleteAttribute));
                    var methodDeprecationReason = methodObsoleteAtt != null ? methodObsoleteAtt.Message ?? "Marked Obsolete" : null;
                    if (!string.IsNullOrWhiteSpace(methodDeprecationReason)) deprecationReason = methodDeprecationReason;

                    QueryArguments queryArgs = new QueryArguments();
                    foreach (var inputParam in method.GetParameters())
                    {
                        var qlInputType = GraphQLUtilities.GenerateQlInputType(inputParam.ParameterType, services, out _);
                        var paramXml = memberXml?.Elements().FirstOrDefault(f => f.Attribute("name")?.Value == inputParam.Name)?.Value?.Trim();
                        queryArgs.Add(GraphQLUtilities.GetQLInputQueryArgument(inputParam, qlInputType, paramXml));
                    }

                    var fieldName = $"{managerType.Name}_{method.Name}";

                    // If the method is marked with a qlquery attribute then attach it to the query object if not default to mutation
                    var qlQueryAttr = method.GetCustomAttribute<QLQueryAttribute>();
                    var destinationQLObject = qlQueryAttr == null ? mutation : query;

                    //Check if method has been overloaded
                    if (destinationQLObject.Fields.Any(a => a.Name == fieldName))
                    {
                        _logger.Debug($"Manager {managerType.Name} has method({method.Name}) overloads which is not supported");
                        fieldName = fieldName + "_" + (destinationQLObject.Fields.Count(a => a.Name == fieldName) + 1);
                    }
                    
                    //Add field to QL
                    if (isAsync)
                    {
                        destinationQLObject.FieldAsync(
                            GraphQLUtilities.GenerateQLOutputType(methodReturnType, services),
                            fieldName,
                            memberXmlComment,
                            queryArgs,
                            async context =>
                            {
                                var serviceProv = ((QLUserContext)context.UserContext).ServiceProvider;
                                var logger = (ILogManager)serviceProv.GetService(typeof(ILogManager));

                                try
                                {
                                    GetMethodManagerAndMethodParameters(method, context, serviceProv, out var manager, out var parameters);

                                    logger.Debug($"Invoking Async {managerType.Name}.{method.Name}");
                                    var methodTask = (Task) method.Invoke(manager, parameters);
                                    await methodTask.ConfigureAwait(false);
                                    var resultPropertyInfo = methodTask.GetType().GetProperty("Result");
                                    return resultPropertyInfo.GetValue(methodTask);
                                }
                                catch (Exception ex)
                                {
                                    logger.Fatal($"Error during manager call, {managerType.Name}.{method.Name}", ex);
                                    throw;
                                }
                            },
                            deprecationReason);
                    }
                    else
                    {
                        destinationQLObject.Field(
                            GraphQLUtilities.GenerateQLOutputType(methodReturnType, services),
                            fieldName,
                            memberXmlComment,
                            queryArgs,
                            context =>
                            {
                                var serviceProv = ((QLUserContext)context.UserContext).ServiceProvider;
                                var logger = (ILogManager)serviceProv.GetService(typeof(ILogManager));

                                try
                                {
                                    GetMethodManagerAndMethodParameters(method, context, serviceProv, out var manager, out var parameters);

                                    logger.Debug($"Invoking {managerType.Name}.{method.Name}");
                                    return method.Invoke(manager, parameters);
                                }
                                catch (Exception ex)
                                {
                                    logger.Fatal($"Error during manager call, {managerType.Name}.{method.Name}", ex);
                                    throw;
                                }
                            },
                            deprecationReason);
                    }
                }
            }

            // Check to see if any classes are used as both method parameter and method return type. Not currently supported.
            // This will break the QL schema as an QLInput model is different to an QL output model and MUST have a unique name.
            // Enums are excluded
            var clashedQLInputOutputTypes = GraphQLUtilities._registeredQLInputTypes.Keys
                .Where(a => 
                    GraphQLUtilities._registeredQLOutputTypes.ContainsKey(a) 
                    && !a.IsEnum)
                .ToArray();

            if (clashedQLInputOutputTypes.Any())
            {
                throw new Exception(
                    $"Cannot have same class registered as both QL Input and Output type, " +
                    $"Errors with types: {string.Join(", ", clashedQLInputOutputTypes.Select(s => s.Name))}");
            }
        }

        private static void GetMethodManagerAndMethodParameters(
            MethodInfo method, 
            ResolveFieldContext<object> context, 
            IServiceProvider serviceProvider,
            out object manager,
            out object[] parameters)
        {
            //Get Variables
            var variableMap = method.GetParameters().Select(s => new
            {
                s.Name,
                Value = context.Arguments.Any(f => f.Key == s.Name) ? GraphQLUtilities.ParseObjectValueFromQL(s, context.Arguments.FirstOrDefault(f => f.Key == s.Name).Value) : GraphQLUtilities.GetParameterDefaultValue(s),
                s.Position
            });

            manager = serviceProvider.GetService(method.DeclaringType);
            parameters = variableMap.OrderBy(o => o.Position).Select(s => s.Value).ToArray();
        }

        #endregion
    }
}
// <copyright file="ProfileLocationQuery.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System; 
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions; 
using GraphQL; 
using GraphQL.Types;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection; 
using ProfileLocation.WebAPI.Models.GraphQL; 
using ProfileLocation.WebAPI.Models.GraphQL.Search; 
using ProfileLocation.WebAPI.Models.GraphQL.Shared; 
using ProfileLocation.WebAPI.Helpers; 
using ProfileLocation.Data.EF.Entities; 
using ProfileLocation.Data.EF.Contexts; 
using ProfileLocation.Domain.ORM.Implementations;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.WebAPI.Models;
using ProfileLocation.Domain.ORM.Models.Input;
using ProfileLocation.Domain.ORM.Models;
using ProfileLocation.WebAPI.Models.GraphQL.EntityFieldEnums;

namespace ProfileLocation.WebAPI.Schema.Query
{
	public class ProfileLocationQuery : ObjectGraphType
	{
		public ProfileLocationQuery()
		{
            

            #region Group

            FieldAsync<PagedListType<Group, GroupType>>("SearchGroup", 
                arguments: new QueryArguments( 
                    new QueryArgument<GroupSearchType>() { Name = "group" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageSize" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageNumber", DefaultValue = 1 }, 
                    new QueryArgument<ListGraphType<SortOrderType<GroupEnumType>>>() { Name = "sortOrder" } 
                    ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    Expression<Func<Group, bool>> searchPredicate = s => true; 
                    if (context.Arguments.ContainsKey("group")) 
                    { 
                        var paramExpression = Expression.Parameter(typeof(Group), "group"); 
                        var binaryExpression = ExpressionHelper.GetValueExpression(context.Arguments["group"] as Dictionary<string, object>, paramExpression); 
                        searchPredicate = Expression.Lambda<Func<Group, bool>>(binaryExpression, paramExpression); 
                    } 
    
                    var pageSize = context.GetArgument<int>("pageSize", defaultValue: 10); 
                    var pageNumber = context.GetArgument<int>("pageNumber", defaultValue: 1); 
                    var sorts = context.GetArgument<IList<SortOrderModel>>("sortOrder"); 
                    var repo = services.GetService(typeof(IRepository<Group>)).As<IRepository<Group>>(); 
                    return await repo.SearchAsync(searchPredicate, pageSize, pageNumber, sorts); 
                });
            FieldAsync<GroupType>("GetGroup", 
                arguments: new QueryArguments( 
                    new QueryArgument<NonNullGraphType<IdGraphType>>() { Name = "id", Description = "Key ID field" } 
                ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    var id = context.GetArgument<System.Int32>("Id"); 
                    var repo = services.GetService<IRepository<Group>>(); 
                    return await repo.GetByIdAsync(id); 
                });
            #endregion Group
            
            

            #region Location

            FieldAsync<PagedListType<Location, LocationType>>("SearchLocation", 
                arguments: new QueryArguments( 
                    new QueryArgument<LocationSearchType>() { Name = "location" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageSize" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageNumber", DefaultValue = 1 }, 
                    new QueryArgument<ListGraphType<SortOrderType<LocationEnumType>>>() { Name = "sortOrder" } 
                    ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    Expression<Func<Location, bool>> searchPredicate = s => true; 
                    if (context.Arguments.ContainsKey("location")) 
                    { 
                        var paramExpression = Expression.Parameter(typeof(Location), "location"); 
                        var binaryExpression = ExpressionHelper.GetValueExpression(context.Arguments["location"] as Dictionary<string, object>, paramExpression); 
                        searchPredicate = Expression.Lambda<Func<Location, bool>>(binaryExpression, paramExpression); 
                    } 
    
                    var pageSize = context.GetArgument<int>("pageSize", defaultValue: 10); 
                    var pageNumber = context.GetArgument<int>("pageNumber", defaultValue: 1); 
                    var sorts = context.GetArgument<IList<SortOrderModel>>("sortOrder"); 
                    var repo = services.GetService(typeof(IRepository<Location>)).As<IRepository<Location>>(); 
                    return await repo.SearchAsync(searchPredicate, pageSize, pageNumber, sorts); 
                });
            FieldAsync<LocationType>("GetLocation", 
                arguments: new QueryArguments( 
                    new QueryArgument<NonNullGraphType<IdGraphType>>() { Name = "id", Description = "Key ID field" } 
                ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    var id = context.GetArgument<System.Int32>("Id"); 
                    var repo = services.GetService<IRepository<Location>>(); 
                    return await repo.GetByIdAsync(id); 
                });
            #endregion Location
            
            

            #region Profile

            FieldAsync<PagedListType<Profile, ProfileType>>("SearchProfile", 
                arguments: new QueryArguments( 
                    new QueryArgument<ProfileSearchType>() { Name = "profile" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageSize" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageNumber", DefaultValue = 1 }, 
                    new QueryArgument<ListGraphType<SortOrderType<ProfileEnumType>>>() { Name = "sortOrder" } 
                    ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    Expression<Func<Profile, bool>> searchPredicate = s => true; 
                    if (context.Arguments.ContainsKey("profile")) 
                    { 
                        var paramExpression = Expression.Parameter(typeof(Profile), "profile"); 
                        var binaryExpression = ExpressionHelper.GetValueExpression(context.Arguments["profile"] as Dictionary<string, object>, paramExpression); 
                        searchPredicate = Expression.Lambda<Func<Profile, bool>>(binaryExpression, paramExpression); 
                    } 
    
                    var pageSize = context.GetArgument<int>("pageSize", defaultValue: 10); 
                    var pageNumber = context.GetArgument<int>("pageNumber", defaultValue: 1); 
                    var sorts = context.GetArgument<IList<SortOrderModel>>("sortOrder"); 
                    var repo = services.GetService(typeof(IRepository<Profile>)).As<IRepository<Profile>>(); 
                    return await repo.SearchAsync(searchPredicate, pageSize, pageNumber, sorts); 
                });
            FieldAsync<ProfileType>("GetProfile", 
                arguments: new QueryArguments( 
                    new QueryArgument<NonNullGraphType<IdGraphType>>() { Name = "id", Description = "Key ID field" } 
                ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    var id = context.GetArgument<System.Int32>("Id"); 
                    var repo = services.GetService<IRepository<Profile>>(); 
                    return await repo.GetByIdAsync(id); 
                });
            #endregion Profile
            
            

            #region ProfileGroup

            FieldAsync<PagedListType<ProfileGroup, ProfileGroupType>>("SearchProfileGroup", 
                arguments: new QueryArguments( 
                    new QueryArgument<ProfileGroupSearchType>() { Name = "profileGroup" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageSize" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageNumber", DefaultValue = 1 }, 
                    new QueryArgument<ListGraphType<SortOrderType<ProfileGroupEnumType>>>() { Name = "sortOrder" } 
                    ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    Expression<Func<ProfileGroup, bool>> searchPredicate = s => true; 
                    if (context.Arguments.ContainsKey("profileGroup")) 
                    { 
                        var paramExpression = Expression.Parameter(typeof(ProfileGroup), "profileGroup"); 
                        var binaryExpression = ExpressionHelper.GetValueExpression(context.Arguments["profileGroup"] as Dictionary<string, object>, paramExpression); 
                        searchPredicate = Expression.Lambda<Func<ProfileGroup, bool>>(binaryExpression, paramExpression); 
                    } 
    
                    var pageSize = context.GetArgument<int>("pageSize", defaultValue: 10); 
                    var pageNumber = context.GetArgument<int>("pageNumber", defaultValue: 1); 
                    var sorts = context.GetArgument<IList<SortOrderModel>>("sortOrder"); 
                    var repo = services.GetService(typeof(IRepository<ProfileGroup>)).As<IRepository<ProfileGroup>>(); 
                    return await repo.SearchAsync(searchPredicate, pageSize, pageNumber, sorts); 
                });
            FieldAsync<ProfileGroupType>("GetProfileGroup", 
                arguments: new QueryArguments( 
                    new QueryArgument<NonNullGraphType<IdGraphType>>() { Name = "id", Description = "Key ID field" } 
                ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    var id = context.GetArgument<System.Int32>("Id"); 
                    var repo = services.GetService<IRepository<ProfileGroup>>(); 
                    return await repo.GetByIdAsync(id); 
                });
            #endregion ProfileGroup
            
            

            #region Social

            FieldAsync<PagedListType<Social, ProfileLocation.WebAPI.Models.GraphQL.SocialType>>("SearchSocial", 
                arguments: new QueryArguments( 
                    new QueryArgument<SocialSearchType>() { Name = "social" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageSize" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageNumber", DefaultValue = 1 }, 
                    new QueryArgument<ListGraphType<SortOrderType<SocialEnumType>>>() { Name = "sortOrder" } 
                    ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    Expression<Func<Social, bool>> searchPredicate = s => true; 
                    if (context.Arguments.ContainsKey("social")) 
                    { 
                        var paramExpression = Expression.Parameter(typeof(Social), "social"); 
                        var binaryExpression = ExpressionHelper.GetValueExpression(context.Arguments["social"] as Dictionary<string, object>, paramExpression); 
                        searchPredicate = Expression.Lambda<Func<Social, bool>>(binaryExpression, paramExpression); 
                    } 
    
                    var pageSize = context.GetArgument<int>("pageSize", defaultValue: 10); 
                    var pageNumber = context.GetArgument<int>("pageNumber", defaultValue: 1); 
                    var sorts = context.GetArgument<IList<SortOrderModel>>("sortOrder"); 
                    var repo = services.GetService(typeof(IRepository<Social>)).As<IRepository<Social>>(); 
                    return await repo.SearchAsync(searchPredicate, pageSize, pageNumber, sorts); 
                });
            FieldAsync<ProfileLocation.WebAPI.Models.GraphQL.SocialType>("GetSocial", 
                arguments: new QueryArguments( 
                    new QueryArgument<NonNullGraphType<IdGraphType>>() { Name = "id", Description = "Key ID field" } 
                ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    var id = context.GetArgument<System.Int32>("Id"); 
                    var repo = services.GetService<IRepository<Social>>(); 
                    return await repo.GetByIdAsync(id); 
                });
            #endregion Social
            
            

            #region SocialType

            FieldAsync<PagedListType<ProfileLocation.Domain.ORM.Models.SocialType, SocialTypeType>>("SearchSocialType", 
                arguments: new QueryArguments( 
                    new QueryArgument<SocialTypeSearchType>() { Name = "socialType" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageSize" }, 
                    new QueryArgument<IntGraphType>() { Name = "pageNumber", DefaultValue = 1 }, 
                    new QueryArgument<ListGraphType<SortOrderType<SocialTypeEnumType>>>() { Name = "sortOrder" } 
                    ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    Expression<Func<ProfileLocation.Domain.ORM.Models.SocialType, bool>> searchPredicate = s => true; 
                    if (context.Arguments.ContainsKey("socialType")) 
                    { 
                        var paramExpression = Expression.Parameter(typeof(ProfileLocation.Domain.ORM.Models.SocialType), "socialType"); 
                        var binaryExpression = ExpressionHelper.GetValueExpression(context.Arguments["socialType"] as Dictionary<string, object>, paramExpression); 
                        searchPredicate = Expression.Lambda<Func<ProfileLocation.Domain.ORM.Models.SocialType, bool>>(binaryExpression, paramExpression); 
                    } 
    
                    var pageSize = context.GetArgument<int>("pageSize", defaultValue: 10); 
                    var pageNumber = context.GetArgument<int>("pageNumber", defaultValue: 1); 
                    var sorts = context.GetArgument<IList<SortOrderModel>>("sortOrder"); 
                    var repo = services.GetService(typeof(IRepository<ProfileLocation.Domain.ORM.Models.SocialType>)).As<IRepository<ProfileLocation.Domain.ORM.Models.SocialType>>(); 
                    return await repo.SearchAsync(searchPredicate, pageSize, pageNumber, sorts); 
                });
            FieldAsync<SocialTypeType>("GetSocialType", 
                arguments: new QueryArguments( 
                    new QueryArgument<NonNullGraphType<IdGraphType>>() { Name = "id", Description = "Key ID field" } 
                ), 
                resolve: async context => 
                { 
                    var services = ((QLUserContext) context.UserContext).ServiceProvider;
                    var id = context.GetArgument<System.Int32>("Id"); 
                    var repo = services.GetService<IRepository<ProfileLocation.Domain.ORM.Models.SocialType>>(); 
                    return await repo.GetByIdAsync(id); 
                });
            #endregion SocialType
            

        }
	}
}
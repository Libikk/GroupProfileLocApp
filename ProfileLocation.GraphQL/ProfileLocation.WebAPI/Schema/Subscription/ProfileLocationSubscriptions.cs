// <copyright file="ProfileLocationSubscriptions.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Collections.Generic;
using GraphQL.Resolvers;
using GraphQL.Types;
using ProfileLocation.Data.EF.Entities;
using ProfileLocation.Domain.ORM.Enums;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.Domain.ORM.Models.Communications;
using ProfileLocation.Domain.ORM.Models;
using ProfileLocation.WebAPI.Models;
using ProfileLocation.WebAPI.Models.GraphQL;
using ProfileLocation.WebAPI.Models.GraphQL.Shared;

namespace ProfileLocation.WebAPI.Schema.Subscription
{
    public class ProfileLocationSubscriptions : ObjectGraphType
    {
        private readonly IEntityObjectEventService _eventService;

        private readonly EntityObservable<Group> _groupInsertObservable = new EntityObservable<Group>();
        private readonly EntityObservable<Group> _groupChangeObservable = new EntityObservable<Group>();
        private readonly Dictionary<int, IObservable<Group>> _groupUpdateObservables = new Dictionary<int, IObservable<Group>>();     
        private readonly EntityObservable<Location> _locationInsertObservable = new EntityObservable<Location>();
        private readonly EntityObservable<Location> _locationChangeObservable = new EntityObservable<Location>();
        private readonly Dictionary<int, IObservable<Location>> _locationUpdateObservables = new Dictionary<int, IObservable<Location>>();     
        private readonly EntityObservable<Profile> _profileInsertObservable = new EntityObservable<Profile>();
        private readonly EntityObservable<Profile> _profileChangeObservable = new EntityObservable<Profile>();
        private readonly Dictionary<int, IObservable<Profile>> _profileUpdateObservables = new Dictionary<int, IObservable<Profile>>();     
        private readonly EntityObservable<ProfileGroup> _profileGroupInsertObservable = new EntityObservable<ProfileGroup>();
        private readonly EntityObservable<ProfileGroup> _profileGroupChangeObservable = new EntityObservable<ProfileGroup>();
        private readonly Dictionary<int, IObservable<ProfileGroup>> _profileGroupUpdateObservables = new Dictionary<int, IObservable<ProfileGroup>>();     
        private readonly EntityObservable<Social> _socialInsertObservable = new EntityObservable<Social>();
        private readonly EntityObservable<Social> _socialChangeObservable = new EntityObservable<Social>();
        private readonly Dictionary<int, IObservable<Social>> _socialUpdateObservables = new Dictionary<int, IObservable<Social>>();     
        private readonly EntityObservable<ProfileLocation.Domain.ORM.Models.SocialType> _socialTypeInsertObservable = new EntityObservable<ProfileLocation.Domain.ORM.Models.SocialType>();
        private readonly EntityObservable<ProfileLocation.Domain.ORM.Models.SocialType> _socialTypeChangeObservable = new EntityObservable<ProfileLocation.Domain.ORM.Models.SocialType>();
        private readonly Dictionary<int, IObservable<ProfileLocation.Domain.ORM.Models.SocialType>> _socialTypeUpdateObservables = new Dictionary<int, IObservable<ProfileLocation.Domain.ORM.Models.SocialType>>();     


        public ProfileLocationSubscriptions(IEntityObjectEventService eventService)
        {
                _eventService = eventService;
                _eventService.EntityObjectEvent += EventService_OnEntityObjectEvent;
#region Group 
                AddField(new EventStreamFieldType
                {
                        Name = "group_OnInsert",
                        Description = "Raises when a new Group has been inserted",
                        Type = typeof(GroupType),
                        Resolver = new FuncFieldResolver<Group>(context => context.Source as Group),
                        Subscriber = new EventStreamResolver<Group>(context => _groupInsertObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "group_OnChange",
                        Description = "Raises when a any update/change to an existing Group",
                        Type = typeof(GroupType),
                        Resolver = new FuncFieldResolver<Group>(context => context.Source as Group),
                        Subscriber = new EventStreamResolver<Group>(context => _groupChangeObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "group_OnUpdate",
                        Description = "Raises when specified ID Group has been updated",
                        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<IntGraphType>>() { Name = "Id", Description = "Key of object to receive updates from" }),
                        Type = typeof(GroupType),
                        Resolver = new FuncFieldResolver<Group>(context => context.Source as Group),
                        Subscriber = new EventStreamResolver<Group>(context => 
                        { 
                        var id = context.GetArgument<int>("id"); 
                        if (_groupUpdateObservables.TryGetValue(id, out var observable)) return observable;
                        observable = new EntityObservable<Group>(() => _groupUpdateObservables.Remove(id)); 
                        _groupUpdateObservables[id] = observable; 
                        return observable; 
                        })
                });
#endregion 
#region Location 
                AddField(new EventStreamFieldType
                {
                        Name = "location_OnInsert",
                        Description = "Raises when a new Location has been inserted",
                        Type = typeof(LocationType),
                        Resolver = new FuncFieldResolver<Location>(context => context.Source as Location),
                        Subscriber = new EventStreamResolver<Location>(context => _locationInsertObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "location_OnChange",
                        Description = "Raises when a any update/change to an existing Location",
                        Type = typeof(LocationType),
                        Resolver = new FuncFieldResolver<Location>(context => context.Source as Location),
                        Subscriber = new EventStreamResolver<Location>(context => _locationChangeObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "location_OnUpdate",
                        Description = "Raises when specified ID Location has been updated",
                        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<IntGraphType>>() { Name = "Id", Description = "Key of object to receive updates from" }),
                        Type = typeof(LocationType),
                        Resolver = new FuncFieldResolver<Location>(context => context.Source as Location),
                        Subscriber = new EventStreamResolver<Location>(context => 
                        { 
                        var id = context.GetArgument<int>("id"); 
                        if (_locationUpdateObservables.TryGetValue(id, out var observable)) return observable;
                        observable = new EntityObservable<Location>(() => _locationUpdateObservables.Remove(id)); 
                        _locationUpdateObservables[id] = observable; 
                        return observable; 
                        })
                });
#endregion 
#region Profile 
                AddField(new EventStreamFieldType
                {
                        Name = "profile_OnInsert",
                        Description = "Raises when a new Profile has been inserted",
                        Type = typeof(ProfileType),
                        Resolver = new FuncFieldResolver<Profile>(context => context.Source as Profile),
                        Subscriber = new EventStreamResolver<Profile>(context => _profileInsertObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "profile_OnChange",
                        Description = "Raises when a any update/change to an existing Profile",
                        Type = typeof(ProfileType),
                        Resolver = new FuncFieldResolver<Profile>(context => context.Source as Profile),
                        Subscriber = new EventStreamResolver<Profile>(context => _profileChangeObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "profile_OnUpdate",
                        Description = "Raises when specified ID Profile has been updated",
                        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<IntGraphType>>() { Name = "Id", Description = "Key of object to receive updates from" }),
                        Type = typeof(ProfileType),
                        Resolver = new FuncFieldResolver<Profile>(context => context.Source as Profile),
                        Subscriber = new EventStreamResolver<Profile>(context => 
                        { 
                        var id = context.GetArgument<int>("id"); 
                        if (_profileUpdateObservables.TryGetValue(id, out var observable)) return observable;
                        observable = new EntityObservable<Profile>(() => _profileUpdateObservables.Remove(id)); 
                        _profileUpdateObservables[id] = observable; 
                        return observable; 
                        })
                });
#endregion 
#region ProfileGroup 
                AddField(new EventStreamFieldType
                {
                        Name = "profileGroup_OnInsert",
                        Description = "Raises when a new ProfileGroup has been inserted",
                        Type = typeof(ProfileGroupType),
                        Resolver = new FuncFieldResolver<ProfileGroup>(context => context.Source as ProfileGroup),
                        Subscriber = new EventStreamResolver<ProfileGroup>(context => _profileGroupInsertObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "profileGroup_OnChange",
                        Description = "Raises when a any update/change to an existing ProfileGroup",
                        Type = typeof(ProfileGroupType),
                        Resolver = new FuncFieldResolver<ProfileGroup>(context => context.Source as ProfileGroup),
                        Subscriber = new EventStreamResolver<ProfileGroup>(context => _profileGroupChangeObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "profileGroup_OnUpdate",
                        Description = "Raises when specified ID ProfileGroup has been updated",
                        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<IntGraphType>>() { Name = "Id", Description = "Key of object to receive updates from" }),
                        Type = typeof(ProfileGroupType),
                        Resolver = new FuncFieldResolver<ProfileGroup>(context => context.Source as ProfileGroup),
                        Subscriber = new EventStreamResolver<ProfileGroup>(context => 
                        { 
                        var id = context.GetArgument<int>("id"); 
                        if (_profileGroupUpdateObservables.TryGetValue(id, out var observable)) return observable;
                        observable = new EntityObservable<ProfileGroup>(() => _profileGroupUpdateObservables.Remove(id)); 
                        _profileGroupUpdateObservables[id] = observable; 
                        return observable; 
                        })
                });
#endregion 
#region Social 
                AddField(new EventStreamFieldType
                {
                        Name = "social_OnInsert",
                        Description = "Raises when a new Social has been inserted",
                        Type = typeof(ProfileLocation.WebAPI.Models.GraphQL.SocialType),
                        Resolver = new FuncFieldResolver<Social>(context => context.Source as Social),
                        Subscriber = new EventStreamResolver<Social>(context => _socialInsertObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "social_OnChange",
                        Description = "Raises when a any update/change to an existing Social",
                        Type = typeof(ProfileLocation.WebAPI.Models.GraphQL.SocialType),
                        Resolver = new FuncFieldResolver<Social>(context => context.Source as Social),
                        Subscriber = new EventStreamResolver<Social>(context => _socialChangeObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "social_OnUpdate",
                        Description = "Raises when specified ID Social has been updated",
                        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<IntGraphType>>() { Name = "Id", Description = "Key of object to receive updates from" }),
                        Type = typeof(ProfileLocation.WebAPI.Models.GraphQL.SocialType),
                        Resolver = new FuncFieldResolver<Social>(context => context.Source as Social),
                        Subscriber = new EventStreamResolver<Social>(context => 
                        { 
                        var id = context.GetArgument<int>("id"); 
                        if (_socialUpdateObservables.TryGetValue(id, out var observable)) return observable;
                        observable = new EntityObservable<Social>(() => _socialUpdateObservables.Remove(id)); 
                        _socialUpdateObservables[id] = observable; 
                        return observable; 
                        })
                });
#endregion 
#region SocialType 
                AddField(new EventStreamFieldType
                {
                        Name = "socialType_OnInsert",
                        Description = "Raises when a new SocialType has been inserted",
                        Type = typeof(SocialTypeType),
                        Resolver = new FuncFieldResolver<ProfileLocation.Domain.ORM.Models.SocialType>(context => context.Source as ProfileLocation.Domain.ORM.Models.SocialType),
                        Subscriber = new EventStreamResolver<ProfileLocation.Domain.ORM.Models.SocialType>(context => _socialTypeInsertObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "socialType_OnChange",
                        Description = "Raises when a any update/change to an existing SocialType",
                        Type = typeof(SocialTypeType),
                        Resolver = new FuncFieldResolver<ProfileLocation.Domain.ORM.Models.SocialType>(context => context.Source as ProfileLocation.Domain.ORM.Models.SocialType),
                        Subscriber = new EventStreamResolver<ProfileLocation.Domain.ORM.Models.SocialType>(context => _socialTypeChangeObservable)
                });
                AddField(new EventStreamFieldType
                {
                        Name = "socialType_OnUpdate",
                        Description = "Raises when specified ID SocialType has been updated",
                        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<IntGraphType>>() { Name = "Id", Description = "Key of object to receive updates from" }),
                        Type = typeof(SocialTypeType),
                        Resolver = new FuncFieldResolver<ProfileLocation.Domain.ORM.Models.SocialType>(context => context.Source as ProfileLocation.Domain.ORM.Models.SocialType),
                        Subscriber = new EventStreamResolver<ProfileLocation.Domain.ORM.Models.SocialType>(context => 
                        { 
                        var id = context.GetArgument<int>("id"); 
                        if (_socialTypeUpdateObservables.TryGetValue(id, out var observable)) return observable;
                        observable = new EntityObservable<ProfileLocation.Domain.ORM.Models.SocialType>(() => _socialTypeUpdateObservables.Remove(id)); 
                        _socialTypeUpdateObservables[id] = observable; 
                        return observable; 
                        })
                });
#endregion 

        }

        private void EventService_OnEntityObjectEvent(object sender, EntityObjectEventMessageModel e)
        {
                switch(e.Entity)
                {  
                    case Group group:
                        if (e.EventType == EntityObjectEventTypeEnum.Added) 
                        { 
                            _groupInsertObservable.SendEntity(group); 
                        } 
                        else 
                        { 
                            _groupChangeObservable.SendEntity(group); 
                            if (_groupUpdateObservables.TryGetValue(group.Id, out var observable)) ((EntityObservable<Group>) observable).SendEntity(group); 
                        }
                        break;
  
                    case Location location:
                        if (e.EventType == EntityObjectEventTypeEnum.Added) 
                        { 
                            _locationInsertObservable.SendEntity(location); 
                        } 
                        else 
                        { 
                            _locationChangeObservable.SendEntity(location); 
                            if (_locationUpdateObservables.TryGetValue(location.Id, out var observable)) ((EntityObservable<Location>) observable).SendEntity(location); 
                        }
                        break;
  
                    case Profile profile:
                        if (e.EventType == EntityObjectEventTypeEnum.Added) 
                        { 
                            _profileInsertObservable.SendEntity(profile); 
                        } 
                        else 
                        { 
                            _profileChangeObservable.SendEntity(profile); 
                            if (_profileUpdateObservables.TryGetValue(profile.Id, out var observable)) ((EntityObservable<Profile>) observable).SendEntity(profile); 
                        }
                        break;
  
                    case ProfileGroup profileGroup:
                        if (e.EventType == EntityObjectEventTypeEnum.Added) 
                        { 
                            _profileGroupInsertObservable.SendEntity(profileGroup); 
                        } 
                        else 
                        { 
                            _profileGroupChangeObservable.SendEntity(profileGroup); 
                            if (_profileGroupUpdateObservables.TryGetValue(profileGroup.Id, out var observable)) ((EntityObservable<ProfileGroup>) observable).SendEntity(profileGroup); 
                        }
                        break;
  
                    case Social social:
                        if (e.EventType == EntityObjectEventTypeEnum.Added) 
                        { 
                            _socialInsertObservable.SendEntity(social); 
                        } 
                        else 
                        { 
                            _socialChangeObservable.SendEntity(social); 
                            if (_socialUpdateObservables.TryGetValue(social.Id, out var observable)) ((EntityObservable<Social>) observable).SendEntity(social); 
                        }
                        break;
  
                    case ProfileLocation.Domain.ORM.Models.SocialType socialType:
                        if (e.EventType == EntityObjectEventTypeEnum.Added) 
                        { 
                            _socialTypeInsertObservable.SendEntity(socialType); 
                        } 
                        else 
                        { 
                            _socialTypeChangeObservable.SendEntity(socialType); 
                            if (_socialTypeUpdateObservables.TryGetValue(socialType.Id, out var observable)) ((EntityObservable<ProfileLocation.Domain.ORM.Models.SocialType>) observable).SendEntity(socialType); 
                        }
                        break;

                }
        }
    }
}

// <copyright file="GraphQLController.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using GraphQL;
using GraphQL.DataLoader;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using ProfileLocation.WebAPI.Models;
using ProfileLocation.WebAPI.Schema;
using ProfileLocation.WebAPI.Schema.Query;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.WebAPI.Models.GraphQL;

namespace ProfileLocation.WebAPI.Controllers
{
    public class GraphQLController : Controller
    {
        private readonly ProfileLocationSchema _schema;
        private readonly ILogManager _logManager;
        private readonly IConfiguration _configuration;

        public GraphQLController(ProfileLocationSchema schema, ILogManager logManager, IConfiguration configuration)
        {
            _schema = schema;
            _logManager = logManager;
            _configuration = configuration;
        }

        [HttpPost]
        public async Task<IActionResult> Index([FromBody] GraphQLQuery query)
        {
            var inputs = query.Variables.ToInputs();
            var resolver = HttpContext.RequestServices;

            var result = await new DocumentExecuter().ExecuteAsync(_ =>
            {
                _.Schema = _schema;
                _.Listeners.Add(resolver.GetService(typeof(DataLoaderDocumentListener)).As<DataLoaderDocumentListener>());
                _.Query = query.Query;
                _.OperationName = query.OperationName;
                _.Inputs = inputs;
                _.UserContext = new QLUserContext(HttpContext);
            }).ConfigureAwait(false);

            if(result.Errors?.Count > 0)
            {
                _logManager.Fatal("Error in QL request: " + query.Query, new AggregateException(result.Errors));
                return StatusCode(500, new { Count = result.Errors.Count, Errors = result.Errors.Select(GetErrorModel).ToArray()});
            }

            return Ok(result);
        }

        [HttpGet]
        [AllowAnonymous]
        public Task<IActionResult> Index()
        {
            return Task.FromResult((IActionResult)View("QLPlayground", null));
        }

        private ErrorModel GetErrorModel(Exception e)
        {
            if (e?.InnerException == null)
            {
                return new ErrorModel()
                {
                    ErrorCode = e.HResult.ToString(),
                    Message = e.Message,
                    ExceptionType = e.GetType().Name,
#if DEBUG
                    Debug = e.ToString()
#endif
                };
            }
            else
            {
                return GetErrorModel(e.InnerException);
            }
        }
    }
}

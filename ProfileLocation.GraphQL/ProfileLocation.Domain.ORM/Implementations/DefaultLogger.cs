// <copyright file="DefaultLogger.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Diagnostics;
using System.IO;
using NLog;
using NLog.Common;
using NLog.Config;
using NLog.Targets;
using ProfileLocation.Domain.ORM.Interfaces;

namespace ProfileLocation.Domain.ORM.Implementations
{
    /// <summary>
    /// Basic logger that uses NLog
    /// </summary>
    public class DefaultLogger : ILogManager
    {
        private NLog.Logger _logger = NLog.LogManager.GetCurrentClassLogger();

        static DefaultLogger()
        {
            if (LogManager.Configuration != null)
            {
                LogManager.Configuration = DefaultConfiguration();
            }
        }

        /// <summary>
        /// Configures default configuration for NLog, local log file with archiving in Log folder
        /// </summary>
        public static LoggingConfiguration DefaultConfiguration()
        {
            //Add default local log file logging if not configured via exe.config or .nlog file
            if (NLog.LogManager.Configuration == null)
            {
                var nlogConfig = new LoggingConfiguration();

                nlogConfig.AddTarget(new FileTarget("LocalLog")
                {
                    FileName = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Log\\${processname}.log"),
                    Layout = "${longdate} ${threadid:padding=2} ${level:uppercase=true:padding=5} ${message} ${exception:format=tostring,data:exceptionDataSeparator=\r\n:seperator=\r\n}",
                    ArchiveFileName = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Log\\${processname}_${shortdate}.log"),
                    MaxArchiveFiles = 7,
                    ArchiveEvery = FileArchivePeriod.Day
                });

#if DEBUG
                nlogConfig.AddRule(LogLevel.Debug, LogLevel.Fatal, "LocalLog");

                InternalLogger.LogLevel = LogLevel.Debug;
                InternalLogger.LogToTrace = true;
                Trace.WriteLine(AppDomain.CurrentDomain.BaseDirectory);
#else
                nlogConfig.AddRule(LogLevel.Info, LogLevel.Fatal, "LocalLog");
#endif

                return nlogConfig;
            }

            return LogManager.Configuration;
        }

        /// <summary>
        /// Logs a fatal error
        /// </summary>
        /// <param name="message"></param>
        /// <param name="ex"></param>
        public void Fatal(string message, Exception ex)
        {
            _logger.Fatal(ex, message);
        }

        /// <summary>
        /// Logs a error level error
        /// </summary>
        /// <param name="message"></param>
        /// <param name="ex"></param>
        public void Error(string message, Exception ex = null)
        {
            _logger.Error(ex, message);
        }

        /// <summary>
        /// Logs a warning
        /// </summary>
        /// <param name="message"></param>
        /// <param name="ex"></param>
        public void Warning(string message, Exception ex = null)
        {
            _logger.Warn(ex, message);
        }

        /// <summary>
        /// Logs info messages
        /// </summary>
        /// <param name="message"></param>
        /// <param name="ex"></param>
        public void Info(string message, Exception ex = null)
        {
            _logger.Info(ex, message);
        }

        /// <summary>
        /// Logs debug messages
        /// </summary>
        /// <param name="message"></param>
        /// <param name="ex"></param>
        public void Debug(string message, Exception ex = null)
        {
#if DEBUG
            System.Diagnostics.Debug.WriteLine(message + (ex != null ? ex.ToString() : ""));
#endif
            _logger.Debug(ex, message);
        }
    }
}

// <copyright file="PropertyInfoHelper.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Linq.Expressions;
using System.Reflection;

namespace ProfileLocation.Domain.ORM.Utils
{
    public static class PropertyInfoHelper
    {
        public static PropertyInfo GetPropertyInfo<T>(Expression<Func<T, object>> selector)
        {
            if (selector.NodeType != ExpressionType.Lambda)
            {
                throw new ArgumentException("Selector must be lambda expression", "selector");
            }
  
            var lambda = (LambdaExpression) selector;
  
            var memberExpression = ExtractMemberExpression(lambda.Body);
  
            if (memberExpression == null)
            {
                throw new ArgumentException("Selector must be member access expression", "selector");
            }
  
            if (memberExpression.Member.DeclaringType == null)
            {
                throw new InvalidOperationException("Property does not have declaring type");
            }
  
            return memberExpression.Member.DeclaringType.GetProperty(memberExpression.Member.Name);
        }
  
        public static MemberExpression ExtractMemberExpression(Expression expression)
        {
            if (expression.NodeType == ExpressionType.MemberAccess)
            {
                return ((MemberExpression) expression);
            }
  
            if (expression.NodeType == ExpressionType.Convert)
            {
                var operand = ((UnaryExpression) expression).Operand;
                return ExtractMemberExpression(operand);
            }
  
            return null;
        }
    }
}

// <copyright file="DefaultValidatorStrategy.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using ProfileLocation.Domain.ORM.Interfaces;
using ProfileLocation.Domain.ORM.Strategies;

namespace ProfileLocation.Domain.ORM.Strategies
{
    public class DefaultValidatorStrategy<TModel> : IValidatorStrategy<TModel>
    {
        private readonly IDataAnnotationsValidator validator;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultValidatorStrategy{TModel}"/> class.
        /// </summary>
        public DefaultValidatorStrategy()
        {
            this.validator = new DataAnnotationsValidator();
        }

        /// <inheritdoc/>
        public virtual bool IsValid(TModel validateThis)
        {
            var results = this.Validate(validateThis);

            if (results.Count == 0)
            {
                return true;
            }
            else
            {
                Debug.WriteLine($"Validation Failed for {typeof(TModel).Name}: " + string.Join(", ", results));
                return false;
            }
        }

        /// <inheritdoc/>
        public virtual IList<string> Validate(TModel model, bool recursive = false)
        {
            var validationResults = new List<ValidationResult>();

            var context = new ValidationContext(model);

            if (recursive == true)
            {
                this.validator.TryValidateObjectRecursive(model, validationResults);
            }
            else
            {
                this.validator.TryValidateObject(model, validationResults);
            }

            Validator.TryValidateObject(
                model, context, validationResults, true);

            List<string> result = new List<string>();

            foreach (var validationResult in validationResults)
            {
                var output = validationResult.ErrorMessage;

                if (validationResult?.MemberNames?.Count() > 0)
                {
                    output += $" - Members: { string.Join(", ", validationResult.MemberNames)}";
                }

                result.Add(output);
            }
            return result?.Distinct()?.ToList();            
        }
    }
}

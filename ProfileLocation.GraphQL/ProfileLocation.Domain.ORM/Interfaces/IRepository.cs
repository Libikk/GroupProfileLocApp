// <copyright file="IRepository.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using ProfileLocation.Domain.ORM.Enums;
using ProfileLocation.Domain.ORM.Models.Input;

namespace ProfileLocation.Domain.ORM.Interfaces
{
    public interface IRepository<TEntity> where TEntity : class
    {
        TEntity GetById(object id);
        TEntity GetById(object id, params Expression<Func<TEntity, object>>[] includes);

        IPagedList<TEntity> GetAll(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null);
        IPagedList<TEntity> GetAll(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes);

        IList<TEntity> GetByIds(IEnumerable<object> ids, IList<SortOrderModel> sortOrders = null);
        IList<TEntity> GetByIds(IEnumerable<object> ids, IList<SortOrderModel> sortOrders, params Expression<Func<TEntity, object>>[] includes);

        IPagedList<TEntity> Search(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null);
        IPagedList<TEntity> Search(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes);

        
        Task<TEntity> GetByIdAsync(object id);
        Task<TEntity> GetByIdAsync(object id, params Expression<Func<TEntity, object>>[] includes);

        Task<IPagedList<TEntity>> GetAllAsync(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null);
        Task<IPagedList<TEntity>> GetAllAsync(int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes);

        Task<IList<TEntity>> GetByIdsAsync(IEnumerable<object> ids, IList<SortOrderModel> sortOrders = null);
        Task<IList<TEntity>> GetByIdsAsync(IEnumerable<object> ids, IList<SortOrderModel> sortOrders, params Expression<Func<TEntity, object>>[] includes);

        Task<IPagedList<TEntity>> SearchAsync(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null);
        Task<IPagedList<TEntity>> SearchAsync(Expression<Func<TEntity, bool>> predicate, int pageSize = 10, int pageNumber = 1, IList<SortOrderModel> sortOrders = null, params Expression<Func<TEntity, object>>[] includes);

        IQueryable<TEntity> Entities { get; }
        IQueryable<TEntity> HeavyEntities(params Expression<Func<TEntity, object>>[] includes);

        TEntity Save(TEntity saveThis);
        bool Delete(TEntity deleteThis);
        
        Task<TEntity> SaveAsync(TEntity saveThis);
        Task<bool> DeleteAsync(TEntity deleteThis);

    }
}

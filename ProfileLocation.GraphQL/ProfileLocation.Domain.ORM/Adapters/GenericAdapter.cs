// <copyright file="GenericAdapter.cs" company="Victor Saly">
// Copyright (c) Victor Saly. All rights reserved.
// </copyright>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using AutoMapper;
using AutoMapper.Extensions.ExpressionMapping;
using ProfileLocation.Domain.ORM.Interfaces;

namespace ProfileLocation.Domain.ORM.Adapters
{
    public class GenericAdapter<TEntity, TModel> : IAdapter<TEntity, TModel> where TEntity : class, new() where TModel : class
    {
        private static IMapper _mapper;
        public GenericAdapter(IMapper mapper)
        {
            _mapper = mapper;
        }

        public void Adapt(TEntity fromValue, TModel toValue)
        {
            _mapper.Map<TEntity, TModel>(fromValue, toValue);
        }

        public void Adapt(TModel fromValue, TEntity toValue)
        {
            _mapper.Map<TModel, TEntity>(fromValue, toValue);
        }
        
        public void Adapt(IEnumerable<TEntity> fromValues, IList<TModel> toValues)
        {
            if (fromValues == null)
                throw new ArgumentNullException("fromValues", "fromValues is null");

            foreach (var fromValue in fromValues)
            {
                toValues.Add(Adapt(fromValue));
            }
        }

        public void Adapt(IEnumerable<TModel> fromValues, IList<TEntity> toValues)
        {
            if (fromValues == null)
                throw new ArgumentNullException("fromValues", "fromValues is null");

            foreach (var fromValue in fromValues)
            {
                toValues.Add(Adapt(fromValue));
            }

        }

        public TEntity Adapt(TModel fromValue)
        {
            if (fromValue == null)
                return null;

            return _mapper.Map<TEntity>(fromValue);
        }

        public TModel Adapt(TEntity fromValue)
        {
            if (fromValue == null)
                return null;

            return _mapper.Map<TModel>(fromValue);
        }

        public IList<TModel> Adapt(IEnumerable<TEntity> fromValues)
        {
            var retList = new List<TModel>();

            Adapt(fromValues, retList);

            return retList;
        }

        public IList<TEntity> Adapt(IEnumerable<TModel> fromValues)
        {
            var retList = new List<TEntity>();

            Adapt(fromValues, retList);

            return retList;
        }

        public Expression<Func<TEntity, bool>> Adapt(Expression<Func<TModel, bool>> predicate)
        {
            return predicate == null ? null : _mapper.MapExpression<Expression<Func<TEntity, bool>>>(predicate);
        }

        public Expression<Func<TEntity, object>>[] Adapt(params Expression<Func<TModel, object>>[] predicates)
        {
            return predicates?.Select(s => _mapper.MapExpression<Expression<Func<TEntity, object>>>(s)).ToArray();
        }
    }
}
